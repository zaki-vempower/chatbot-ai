generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  name          String?
  password      String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  conversations Conversation[]
  crawledData   CrawledData[]
}

model Conversation {
  id        String    @id @default(cuid())
  title     String
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[]
}

model Message {
  id             String       @id @default(cuid())
  content        String
  role           String
  conversationId String
  createdAt      DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
}

model CrawlerGroup {
  id        String   @id @default(cuid())
  name      String   @unique
  userId    String
  createdAt DateTime @default(now())
  pages     CrawledData[]
}


model CrawledData {
  id        String   @id @default(cuid())
  url       String
  title     String?
  content   String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  groupId   String? 
  group     CrawlerGroup? @relation(fields: [groupId], references: [id])

  @@unique([url, userId])
}

model ApiKey {
  id        String   @id @default(cuid())
  provider  String
  key       String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


